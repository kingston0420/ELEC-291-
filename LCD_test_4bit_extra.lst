0000              1   ; LCD_test_4bit.asm: Initializes and uses an LCD in 4-bit mode
0000              2   ; using the most common procedure found on the internet.
                  4   $LIST
0000              6   
0000              7   org 0000H
0000 020082       8       ljmp myprogram
0003              9   
0003             10   ; These 'equ' must match the hardware wiring
0003             11   LCD_RS equ P1.1
0003             12   LCD_RW equ P1.2 ; Not used in this code
0003             13   LCD_E  equ P1.3
0003             14   LCD_D4 equ P3.2
0003             15   LCD_D5 equ P3.3
0003             16   LCD_D6 equ P3.4
0003             17   LCD_D7 equ P3.5
0003             18   
0003             19   ; When using a 22.1184MHz crystal in fast mode
0003             20   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
0003             21   
0003             22   ;---------------------------------;
0003             23   ; Wait 40 microseconds            ;
0003             24   ;---------------------------------;
0003             25   Wait40uSec:
0003 C000        26       push AR0
0005 78B1        27       mov R0, #177
0007             28   L0:
0007 00          29       nop
0008 00          30       nop
0009 D8FC        31       djnz R0, L0 ; 1+1+3 cycles->5*45.21123ns*177=40us
000B D000        32       pop AR0
000D 22          33       ret
000E             34   
000E             35   ;---------------------------------;
000E             36   ; Wait 'R2' milliseconds          ;
000E             37   ;---------------------------------;
000E             38   WaitmilliSec:
000E C000        39       push AR0
0010 C001        40       push AR1
0012 792D        41   L3: mov R1, #45
0014 78A6        42   L2: mov R0, #166
0016 D8FE        43   L1: djnz R0, L1 ; 3 cycles->3*45.21123ns*166=22.51519us
0018 D9FA        44       djnz R1, L2 ; 22.51519us*45=1.013ms
001A DAF6        45       djnz R2, L3 ; number of millisecons to wait passed in R2
001C D001        46       pop AR1
001E D000        47       pop AR0
0020 22          48       ret
0021             49   
0021             50   ;---------------------------------;
0021             51   ; Toggles the LCD's 'E' pin       ;
0021             52   ;---------------------------------;
0021             53   LCD_pulse:
0021 D293        54       setb LCD_E
0023 120003      55       lcall Wait40uSec
0026 C293        56       clr LCD_E
0028 22          57       ret
0029             58   
0029             59   ;---------------------------------;
0029             60   ; Writes data to LCD              ;
0029             61   ;---------------------------------;
0029             62   WriteData:
0029 D291        63       setb LCD_RS
002B 020033      64       ljmp LCD_byte
002E             65   
002E             66   ;---------------------------------;
002E             67   ; Writes command to LCD           ;
002E             68   ;---------------------------------;
002E             69   WriteCommand:
002E C291        70       clr LCD_RS
0030 020033      71       ljmp LCD_byte
0033             72   
0033             73   ;---------------------------------;
0033             74   ; Writes acc to LCD in 4-bit mode ;
0033             75   ;---------------------------------;
0033             76   LCD_byte:
0033             77       ; Write high 4 bits first
0033 A2E7        78       mov c, ACC.7
0035 92B5        79       mov LCD_D7, c
0037 A2E6        80       mov c, ACC.6
0039 92B4        81       mov LCD_D6, c
003B A2E5        82       mov c, ACC.5
003D 92B3        83       mov LCD_D5, c
003F A2E4        84       mov c, ACC.4
0041 92B2        85       mov LCD_D4, c
0043 120021      86       lcall LCD_pulse
0046             87   
0046             88       ; Write low 4 bits next
0046 A2E3        89       mov c, ACC.3
0048 92B5        90       mov LCD_D7, c
004A A2E2        91       mov c, ACC.2
004C 92B4        92       mov LCD_D6, c
004E A2E1        93       mov c, ACC.1
0050 92B3        94       mov LCD_D5, c
0052 A2E0        95       mov c, ACC.0
0054 92B2        96       mov LCD_D4, c
0056 120021      97       lcall LCD_pulse
0059 22          98       ret
005A             99   
005A            100   ;---------------------------------;
005A            101   ; Configure LCD in 4-bit mode     ;
005A            102   ;---------------------------------;
005A            103   LCD_4BIT:
005A C293       104       clr LCD_E   ; Resting state of LCD's enable is zero
005C C292       105       clr LCD_RW  ; We are only writing to the LCD in this program
005E            106   
005E            107       ; After power on, wait for the LCD start up time before initializing
005E            108       ; NOTE: the preprogrammed power-on delay of 16 ms on the AT89LP51RC2
005E            109       ; seems to be enough.  That is why these two lines are commented out.
005E            110       ; Also, commenting these two lines improves simulation time in Multisim.
005E            111       ; mov R2, #40
005E            112       ; lcall WaitmilliSec
005E            113   
005E            114       ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
005E 7433       115       mov a, #0x33
0060 12002E     116       lcall WriteCommand
0063 7433       117       mov a, #0x33
0065 12002E     118       lcall WriteCommand
0068 7432       119       mov a, #0x32 ; change to 4-bit mode
006A 12002E     120       lcall WriteCommand
006D            121   
006D            122       ; Configure the LCD
006D 7428       123       mov a, #0x28
006F 12002E     124       lcall WriteCommand
0072 740C       125       mov a, #0x0c
0074 12002E     126       lcall WriteCommand
0077 7401       127       mov a, #0x01 ;  Clear screen command (takes some time)
0079 12002E     128       lcall WriteCommand
007C            129   
007C            130       ;Wait for clear screen command to finish. Usually takes 1.52ms.
007C 7A02       131       mov R2, #2
007E 12000E     132       lcall WaitmilliSec
0081 22         133       ret
0082            134   
0082            135   ;---------------------------------;
0082            136   ; Main loop.  Initialize stack,   ;
0082            137   ; ports, LCD, and displays        ;
0082            138   ; letters on the LCD              ;
0082            139   ;---------------------------------;
0082            140   myprogram:
0082 75817F     141     mov SP, #7FH
0085 12005A     142       lcall LCD_4BIT
0088 7480       143       mov a, #0x80 ; KINGSTON CHEN
008A 12002E     144       lcall WriteCommand
008D 744B       145       mov a, #'K'
008F 120029     146       lcall WriteData
0092            147       
0092 7481       148       mov a, #0x81 
0094 12002E     149       lcall WriteCommand
0097 7449       150       mov a, #'I'
0099 120029     151       lcall WriteData
009C            152       
009C 7482       153       mov a, #0x82 
009E 12002E     154       lcall WriteCommand
00A1 744E       155       mov a, #'N'
00A3 120029     156       lcall WriteData
00A6            157       
00A6 7483       158       mov a, #0x83
00A8 12002E     159       lcall WriteCommand
00AB 7447       160       mov a, #'G'
00AD 120029     161       lcall WriteData
00B0            162       
00B0 7484       163       mov a, #0x84 ; 
00B2 12002E     164       lcall WriteCommand
00B5 7453       165       mov a, #'S'
00B7 120029     166       lcall WriteData
00BA            167       
00BA 7485       168       mov a, #0x85
00BC 12002E     169       lcall WriteCommand
00BF 7454       170       mov a, #'T'
00C1 120029     171       lcall WriteData
00C4            172       
00C4 7486       173       mov a, #0x86
00C6 12002E     174       lcall WriteCommand
00C9 744F       175       mov a, #'O'
00CB 120029     176       lcall WriteData
00CE            177       
00CE 7487       178       mov a, #0x87
00D0 12002E     179       lcall WriteCommand
00D3 744E       180       mov a, #'N'
00D5 120029     181       lcall WriteData
00D8            182       
00D8 7489       183       mov a, #0x89
00DA 12002E     184       lcall WriteCommand
00DD 7443       185       mov a, #'C'
00DF 120029     186       lcall WriteData
00E2            187       
00E2 748A       188       mov a, #0x8A
00E4 12002E     189       lcall WriteCommand
00E7 7448       190       mov a, #'H'
00E9 120029     191       lcall WriteData
00EC            192       
00EC 748B       193       mov a, #0x8B
00EE 12002E     194       lcall WriteCommand
00F1 7445       195       mov a, #'E'
00F3 120029     196       lcall WriteData
00F6            197       
00F6 748C       198       mov a, #0x8C
00F8 12002E     199       lcall WriteCommand
00FB 744E       200       mov a, #'N'
00FD 120029     201       lcall WriteData
0100            202       
0100 748D       203       mov a, #0x8D
0102 12002E     204       lcall WriteCommand
0105 7421       205       mov a, #'!'
0107 120029     206       lcall WriteData
010A            207       
010A 74C0       208       mov a, #0xC0 ; 25028549
010C 12002E     209       lcall WriteCommand
010F 7432       210       mov a, #'2'
0111 120029     211       lcall WriteData
0114 74C1       212       mov a, #0xC1 
0116 12002E     213       lcall WriteCommand
0119 7435       214       mov a, #'5'
011B 120029     215       lcall WriteData
011E 74C2       216       mov a, #0xC2 
0120 12002E     217       lcall WriteCommand
0123 7430       218       mov a, #'0'
0125 120029     219       lcall WriteData
0128 74C3       220       mov a, #0xC3
012A 12002E     221       lcall WriteCommand
012D 7432       222       mov a, #'2'
012F 120029     223       lcall WriteData
0132 74C4       224       mov a, #0xC4 
0134 12002E     225       lcall WriteCommand
0137 7438       226       mov a, #'8'
0139 120029     227       lcall WriteData
013C 74C5       228       mov a, #0xC5
013E 12002E     229       lcall WriteCommand
0141 7435       230       mov a, #'5'
0143 120029     231       lcall WriteData
0146 74C6       232       mov a, #0xC6 
0148 12002E     233       lcall WriteCommand
014B 7434       234       mov a, #'4'
014D 120029     235       lcall WriteData
0150 74C7       236       mov a, #0xC7 
0152 12002E     237       lcall WriteCommand
0155 7439       238       mov a, #'9'
0157 120029     239       lcall WriteData
015A            240       
015A            241   
015A            242   forever:
015A            243   
015A B2B7       244       cpl P3.7 ; LED
015C            245      
015C 7493       246       mov a, #0x93 ; winky
015E 12002E     247       lcall WriteCommand
0161 743B       248       mov a, #0x3B
0163 120029     249       lcall WriteData
0166 7494       250       mov a, #0x94
0168 12002E     251       lcall WriteCommand
016B 7429       252       mov a, #0x29
016D 120029     253       lcall WriteData
0170            254       
0170 7AC8       255       mov R2, #200
0172 12000E     256       lcall WaitmilliSec
0175            257       
0175 7493       258       mov a, #0x93 ; winky so the eyes changes 
0177 12002E     259       lcall WriteCommand
017A 743A       260       mov a, #0x3A
017C 120029     261       lcall WriteData
017F 7494       262       mov a, #0x94
0181 12002E     263       lcall WriteCommand
0184 7429       264       mov a, #0x29
0186 120029     265       lcall WriteData
0189            266       
0189 7AC8       267       mov R2, #200
018B 12000E     268       lcall WaitmilliSec
018E            269       
018E 741A       270       mov a, #0x1A ; shif to the left
0190 12002E     271       lcall WriteCommand
0193 80C5       272       sjmp forever
0195            273   
0195            274   END
